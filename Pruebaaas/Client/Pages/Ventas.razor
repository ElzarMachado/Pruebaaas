@page "/ventas"
@inject HttpClient Http
@using Newtonsoft.Json;
@using Pruebaaas.Shared.Models
@using System.Net.Http.Json
@using System.Text;

<div class="container mt-5">
    <h2>Lista de Ventas</h2>
    <table class="table">
        <thead class="titulos-tabla">
            <tr>
                <th>Folio</th>
                <th>Fecha</th>
                <th>Total</th>
                <th>Cliente</th>
            </tr>
        </thead>
        <tbody>
            @if (ventas != null && ventas.Any())
            {
                @foreach (var venta in ventas)
                {
                    <tr>
                        <td>@venta.Folio</td>
                        <td>@venta.Fecha.ToString("dd/MM/yyyy")</td>
                        <td>@venta.Total.ToString("C2")</td>
                        <td>@venta.Cliente.Nombre</td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">No hay ventas.</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Agregar Venta</h2>
    <form @onsubmit="CrearVenta">
        <div class="form-group">
            <label for="ClienteId">Cliente:</label>
            <InputSelect @bind-Value="nuevaVenta.ClienteId" class="form-control">
                <option value="">[Seleccione Cliente]</option>
                @foreach (var cliente in clientes)
                {
                    <option value="@cliente.Id">@cliente.Nombre</option>
                }
            </InputSelect>
        </div>

        <div class="container mt-5">
            <div>
                <div>
                    <InputSelect @bind-Value="productoSeleccionadoId" class="form-control">
                        <option value="">[Seleccione Producto]</option>
                        @foreach (var producto in productos)
                        {
                            <option value="@producto.Id">@producto.Nombre Precio: @producto.PrecioUnitario.ToString("N2") </option>
                        }
                    </InputSelect>
                </div>
                <br />
                <div>
                    <label for="concepto.Cantidad">Cantidad:</label>
                    <input type="number" @bind-value="concepto.Cantidad" />
                </div>
                <br />
                <div>
                    <label for="concepto.Descuento">Descuento:</label>
                    <input type="number" @bind-value="concepto.Descuento" />
                </div>
                <button type="button" id="boton-agregar" class="btn btn-success" @onclick="AgregarProducto"><i class="bi bi-save"></i> Agregar Producto</button>
            </div>

            <h2>Conceptos de venta</h2>
            <table class="table">
                <thead class="titulos-tabla">
                    <tr>
                        <th>Id</th>
                        <th>Nombre producto</th>
                        <th>Cantidad</th>
                        <th>Precio</th>
                        <th>Descuento</th>
                        <th>Importe</th>
                    </tr>
                </thead>
                <tbody>
                    @if (nuevaVenta != null && nuevaVenta.Conceptos.Any())
                    {
                        @foreach (var conceptoVenta in nuevaVenta.Conceptos)
                        {
                            <tr>
                                <td>@conceptoVenta.ProductoId</td>
                                <td>@conceptoVenta.Cantidad.ToString("N2")</td>
                                <td>@conceptoVenta.Descuento.ToString("N2")</td>
                                <td>@conceptoVenta.PrecioUnitario.ToString("N2")</td>
                                <td>@conceptoVenta.Importe.ToString("N2")</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4">No hay ventas.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        <button type="submit" id="boton-agregar" @onclick="CrearVenta" class="btn btn-primary">
            <i class="bi bi-receipt"></i>
            Crear Venta
        </button>
    </form>
</div>

@code {
    List<VentaDto> ventas = new List<VentaDto>();
    VentaAgregarDto nuevaVenta = new VentaAgregarDto();

    VentaConceptosDto concepto = new VentaConceptosDto();

    List<ClienteDto> clientes = new List<ClienteDto>();
    List<ProductoDto> productos = new List<ProductoDto>();
    int productoSeleccionadoId = 0;

    protected override async Task OnInitializedAsync()
    {
        await CargarVentas();
        await CargarClientes();
        await CargarProductos();
    }

    private void AgregarProducto()
    {
        try
        {
            if (nuevaVenta.Conceptos == null)
            {
                nuevaVenta.Conceptos = new List<VentaConceptosDto>();
            }

            concepto.ProductoId = productoSeleccionadoId;
            nuevaVenta.Conceptos.Add(concepto);
            concepto = new VentaConceptosDto();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar la venta: {ex.Message}");
        }
    }

    private void EliminarProducto(int index)
    {
        if (index >= 0 && index < nuevaVenta.Conceptos.Count)
        {
            nuevaVenta.Conceptos.RemoveAt(index);
        }
    }

    private async Task CargarVentas()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<VentaDto>>("api/venta");
            if (response != null)
            {
                ventas = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar ventas: {ex.Message}");
        }
    }
    private async Task CargarProductos()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ProductoDto>>("api/producto");
            if (response != null)
            {
                productos = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar ventas: {ex.Message}");
        }
    }

    private async Task CargarClientes()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ClienteDto>>("api/clientes");
            if (response != null)
            {
                clientes = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
        }
    }

    private decimal CalcularImporte(VentaConceptosDto concepto)
    {
        return concepto.Cantidad * concepto.PrecioUnitario;
    }

    private async Task CrearVenta()
    {
        try
        {
            string json = JsonConvert.SerializeObject(nuevaVenta);
            var content = new StringContent(json, Encoding.UTF8, "application/json");
            var response = await Http.PostAsync("api/venta", content);

            if (response.IsSuccessStatusCode)
            {
                await CargarVentas();
                nuevaVenta = new VentaAgregarDto();
            }
            else
            {
                throw new Exception("Error al crear la venta");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear la venta: {ex.Message}");
        }
    }
}
