@page "/productos"
@using Pruebaaas.Shared.Models
@inject HttpClient Http

<h1>Productos</h1>

<div class="container mt-5">
    <h2>Lista de Productos</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Unidades en Stock</th>
                <th>Clave de Producto</th>
                <th>Clasificación</th>
                <th>Proveedor</th>
            </tr>
        </thead>
        <tbody>
            @if (productos != null && productos.Any())
            {
                @foreach (var producto in productos)
                {
                    <tr>
                        <td>@producto.Nombre</td>
                        <td>@producto.UnidadesEnStock</td>
                        <td>@producto.ClaveProducto</td>
                        <td>@producto.Clasificacion</td>
                        <td>
                            @foreach (var proveedor in producto.Proveedores)
                            {
                                <span class="badge rounded-pill" style="background-color:aquamarine; color: black">
                                    @proveedor.Nombre
                                </span>


                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">No hay productos.</td>
                </tr>
            }
        </tbody>
    </table>
    <h2>Agregar Producto</h2>
    <form>
        <div class="form-group">
            <label for="nombre">Nombre:</label>
            <input type="text" class="form-control" id="nombre" @bind="nuevoProducto.Nombre" />
        </div>
        <div class="form-group">
            <label for="unidadesEnStock">Unidades en Stock:</label>
            <input type="number" class="form-control" id="unidadesEnStock" @bind="nuevoProducto.UnidadesEnStock" />
        </div>
        <div class="form-group">
            <label for="claveProducto">Clave de Producto:</label>
            <input type="text" class="form-control" id="claveProducto" @bind="nuevoProducto.ClaveProducto" />
        </div>

        <div class="form-group">
            <label for="clasificacionId">Clasificación:</label>
            <InputSelect @bind-Value="nuevoProducto.ClasificacionId" class="form-control">
                <option value="">[Seleccione Clasificación]</option>
                @foreach (var clasificacion in clasificaciones)
                {
                    <option value="@clasificacion.Id">@clasificacion.Descripcion</option>

                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="proveedorIds">Proveedor:</label>
            <InputSelect @bind-Value="proveedorSeleccionadoId" class="form-control" multiple>
                <option value="">[Seleccione Proveedor]</option>
                @foreach (var proveedor in proveedores)
                {
                    <option value="@proveedor.Id">@proveedor.Nombre</option>
                }
            </InputSelect>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                </tr>
            </thead>
            <tbody>
                @if (productos != null && productos.Any())
                {
                    @foreach (var producto in productos)
                    {
                        <tr>
                            <td>@producto.Id</td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No hay proveedores.</td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="button" class="btn btn-primary" @onclick="AgregarProveedor">Ageregar Proveedor</button>

        <button type="button" class="btn btn-primary" @onclick="AgregarProducto">Guardar</button>

        @foreach (var proveedorid in nuevoProducto.ProveedoresIds)
        {
            <label>@proveedorid</label>
        }
    </form>
</div>

@code {
    List<ProductoDto> productos = new List<ProductoDto>();
    ProductoAgregarDto nuevoProducto = new ProductoAgregarDto();
    List<ProveedorDto> proveedores = new List<ProveedorDto>();
    int proveedorSeleccionadoId = 0;
    List<ProductoClasificacionDto> clasificaciones = new List<ProductoClasificacionDto>();

    protected override async Task OnInitializedAsync()
    {
        await CargarProductosClasificaciones();
        await CargarProveedores();
        await CargarProductos();
    }

    private void AgregarProveedor()
    {
        if (proveedorSeleccionadoId != 0 && !nuevoProducto.ProveedoresIds.Contains(proveedorSeleccionadoId))
        {
            nuevoProducto.ProveedoresIds.Add(proveedorSeleccionadoId);
        }

    }

    private async Task CargarProveedores()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ProveedorDto>>("api/Proveedores");
            if (response != null)
            {
                proveedores = response;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar proveedores: {ex.Message}");
        }
    }


    private async Task CargarProductosClasificaciones()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<ProductoClasificacionDto>>("api/ProductoClasificacion");
            if (response != null)
            {
                clasificaciones = response;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clasificaciones: {ex.Message}");
        }
    }

    private async Task CargarProductos()
    {
        try
        {
            productos = await Http.GetFromJsonAsync<List<ProductoDto>>("api/producto");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar productos: {ex.Message}");
        }
    }

    private async Task AgregarProducto()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/producto", nuevoProducto);

            if (response.IsSuccessStatusCode)
            {
                await CargarProductos();
                nuevoProducto = new ProductoAgregarDto();
            }
            else
            {
                Console.WriteLine("Error al agregar el producto");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar el producto: {ex.Message}");
        }
    }
}
