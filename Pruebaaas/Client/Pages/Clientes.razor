@page "/clientes"
@using Pruebaaas.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Clientes</h1>

<div class="container mt-5">
    <h2>Lista de Clientes</h2>
    <table class="table">
        <thead class="table-productos-espacio">
            <tr>
                <th>RFC</th>
                <th>Nombre</th>
                <th>Correo</th>
                <th>Domicilio</th>
                <th>Teléfono</th>
                <th>Tiene Crédito</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (clientes != null && clientes.Any())
            {
                @foreach (var cliente in clientes)
                {
                    <tr>
                        <td>@cliente.RFC</td>
                        <td>@cliente.Nombre</td>
                        <td>@cliente.Correo</td>
                        <td>@cliente.Domicilio</td>
                        <td>@cliente.Telefono</td>
                        <td>@(cliente.TieneCredito ? "Sí" : "No")</td>
                        <td><button class="btn btn-link" @onclick="() => SeleccionarCliente(cliente)">Seleccionar</button></td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="7">No hay clientes.</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Agregar Cliente</h2>
    <form>
        <div class="form-group">
            <label for="rfc">RFC:</label>
            <input type="text" class="form-control" id="rfc" @bind="nuevoCliente.RFC" />
        </div>
        <div class="form-group">
            <label for="nombre">Nombre:</label>
            <input type="text" class="form-control" id="nombre" @bind="nuevoCliente.Nombre" />
        </div>
        <div class="form-group">
            <label for="correo">Correo:</label>
            <input type="text" class="form-control" id="correo" @bind="nuevoCliente.Correo" />
        </div>
        <div class="form-group">
            <label for="domicilio">Domicilio:</label>
            <input type="text" class="form-control" id="domicilio" @bind="nuevoCliente.Domicilio" />
        </div>
        <div class="form-group">
            <label for="telefono">Teléfono:</label>
            <input type="text" class="form-control" id="telefono" @bind="nuevoCliente.Telefono" />
        </div>
        <div class="form-group form-check">
            <input type="checkbox" class="form-check-input" id="tieneCredito" @bind="nuevoCliente.TieneCredito" />
            <label class="form-check-label" for="tieneCredito">Tiene Crédito</label>
        </div>
        <br />
        <button type="button" id="boton-guardar" class="btn btn-primary" @onclick="AgregarCliente">
            <i class="bi bi-save"></i>
            Guardar
        </button>
        <button type="button" id="boton-borrar" class="btn btn-primary" @onclick="EliminarCliente">
            <i class="bi bi-x-circle"></i>
            Borrar
        </button>
        <button type="button" class="btn btn-primary xd" @onclick="ActualizarCliente">
            <i class="bi bi-arrow-clockwise"></i>
            Actualizar
        </button>






    </form>
</div>

@code {
    List<ClienteDto> clientes = new List<ClienteDto>();
    ClienteDto clienteSeleccionado = null;
    ClienteAgregarDto nuevoCliente = new ClienteAgregarDto();

    private bool loadingVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarClientes();
    }





    private async Task CargarClientes()
    {
        try
        {
            loadingVisible = true;
            var response = await Http.GetFromJsonAsync<List<ClienteDto>>("api/clientes");
            if (response != null)
            {
                clientes = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
        }
        finally
        {
            loadingVisible = false;
        }
    }


    private async Task AgregarCliente()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("/api/clientes", nuevoCliente);

            if (response.IsSuccessStatusCode)
            {
                await CargarClientes();
            }
            else
            {
                Console.WriteLine("Error al agregar el cliente");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar el cliente: {ex.Message}");
        }
    }

    private async Task EliminarCliente()
    {
        try
        {
            if (clienteSeleccionado != null)
            {
                var response = await Http.DeleteAsync($"/api/clientes/{clienteSeleccionado.Id}");

                if (response.IsSuccessStatusCode)
                {
                    await CargarClientes();
                    clienteSeleccionado = null; 
                    nuevoCliente = new ClienteAgregarDto(); 
                }
                else
                {
                    Console.WriteLine("Error al eliminar el cliente");
                }
            }
            else
            {
                Console.WriteLine("No hay cliente seleccionado para eliminar");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el cliente: {ex.Message}");
        }
    }

private async Task ActualizarCliente()
    {
        try
        {
            if (clienteSeleccionado != null)
            {
                var response = await Http.PutAsJsonAsync($"/api/clientes/{clienteSeleccionado.Id}", nuevoCliente);

                if (response.IsSuccessStatusCode)
                {
                    await CargarClientes();
                    clienteSeleccionado = null; 
                    nuevoCliente = new ClienteAgregarDto(); 
                }
                else
                {
                    Console.WriteLine("Error al actualizar el cliente");
                }
            }
            else
            {
                Console.WriteLine("No hay cliente seleccionado para actualizar");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar el cliente: {ex.Message}");
        }
    }





    private void SeleccionarCliente(ClienteDto cliente)
    {
        clienteSeleccionado = cliente;
        nuevoCliente.RFC = cliente.RFC;
        nuevoCliente.Nombre = cliente.Nombre;
        nuevoCliente.Correo = cliente.Correo;
        nuevoCliente.Domicilio = cliente.Domicilio;
        nuevoCliente.Telefono = cliente.Telefono;
        nuevoCliente.TieneCredito = cliente.TieneCredito;
    }


}
